===============================
        Integer valid
===============================

First we import the module:
    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Now we try simple things:
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("my_int", 12)
    
    >>> bg.integer_validator("my_int", 90)

    >>> bg.integer_validator("my_int", 0)
    Traceback (most recent call last):
    ...
    ValueError: my_int must be greater than 0
    
    >>> bg.integer_validator("John", "amr")
    Traceback (most recent call last):
    ...
    TypeError: John must be an integer

    >>> bg.integer_validator("John", [1, 2])
    Traceback (most recent call last):
    ...
    TypeError: John must be an integer

    >>> bg.integer_validator("John", True)
    Traceback (most recent call last):
    ...
    TypeError: John must be an integer

    >>> bg.integer_validator("John", 0.5)
    Traceback (most recent call last):
    ...
    TypeError: John must be an integer

    >>> bg.integer_validator("John", (5, ))
    Traceback (most recent call last):
    ...
    TypeError: John must be an integer

Checking for no arguments to integer_validator:
    >>> bg.integer_validator()
    Traceback (most recent call last):
    ...
    TypeError: BaseGeometry.integer_validator() missing 2 required positional arguments: 'name' and 'value'

Checking for only 1 argument to integer_validator:
    >>> bg.integer_validator("integer")
    Traceback (most recent call last):
    ...
    TypeError: BaseGeometry.integer_validator() missing 1 required positional argument: 'value'

Checking for too many arguments:
    >>> bg.integer_validator("integer", 1, 2)
    Traceback (most recent call last):
    ...
    TypeError: BaseGeometry.integer_validator() takes 3 positional arguments but 4 were given